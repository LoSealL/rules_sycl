load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("//sycl/private:rules/flags.bzl", "repeatable_string_flag", "sycl_archs_flag")

package(default_visibility = ["//visibility:public"])

bzl_library(
    name = "bzl_srcs",
    srcs = glob(["*.bzl"]),
    visibility = ["//visibility:public"],
    deps = ["//sycl/private:bzl_srcs"],
)

toolchain_type(name = "toolchain_type")

config_setting(
    name = "is_valid_toolchain_found",
    flag_values = {"@sycl//:valid_toolchain_found": "True"},
)

# Command line flag to specify the list of SYCL architectures to compile for.
#
# Provides SyclArchsInfo of the list of archs to build.
#
# Example usage: --@rules_sycl//sycl:archs=sm_70,sm_75;sm_80,sm_86
#
# See SyclArchsInfo for detailed grammar
sycl_archs_flag(
    name = "archs",
    build_setting_default = "",
)

# Command line flag for copts to add to sycl_library() compile command.
repeatable_string_flag(
    name = "copts",
    build_setting_default = "",
)

repeatable_string_flag(
    name = "host_copts",
    build_setting_default = "",
)

# Command line flag to specify the SYCL runtime. Use this target as SYCL
# runtime dependency.
#
# This target is implicitly added as a dependency to sycl_library() targets.
#
# Example usage: --@rules_sycl//sycl:runtime=@sycl//:sycl_runtime_static
label_flag(
    name = "runtime",
    build_setting_default = "@sycl//:sycl_runtime",
)

constraint_setting(name = "rules_are_enabled_setting")

constraint_value(
    name = "rules_are_enabled",
    constraint_setting = ":rules_are_enabled_setting",
)
