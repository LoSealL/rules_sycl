"""
Copyright (c) 2025 Intel Corporation
Author: Wenyi Tang
E-mail: wenyi.tang@intel.com

custom cc toolchains for Windows
"""

load(":windows_cc_toolchain_config.bzl", "cc_toolchain_config")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "empty",
    srcs = [],
)

filegroup(
    name = "msvc_compiler_files",
    srcs = [],
)

cc_toolchain_config(
    name = "msvc_x64",
    cpu = "x64_windows",
    compiler = "msvc-cl",
    host_system_name = "local",
    target_system_name = "local",
    target_libc = "msvcrt",
    abi_version = "local",
    abi_libc_version = "local",
    toolchain_identifier = "msvc_x64",
    msvc_env_tmp = "%{msvc_env_tmp_x64}",
    msvc_env_path = "%{msvc_env_path_x64}",
    msvc_env_include = "%{msvc_env_include_x64}",
    msvc_env_lib = "%{msvc_env_lib_x64}",
    msvc_cl_path = "%{msvc_cl_path_x64}",
    msvc_ml_path = "%{msvc_ml_path_x64}",
    msvc_link_path = "%{msvc_link_path_x64}",
    msvc_lib_path = "%{msvc_lib_path_x64}",
    cxx_builtin_include_directories = [%{msvc_cxx_builtin_include_directories_x64}],
    tool_paths = {
        "ar": "%{msvc_lib_path_x64}",
        "ml": "%{msvc_ml_path_x64}",
        "cpp": "%{msvc_cl_path_x64}",
        "gcc": "%{msvc_cl_path_x64}",
        "gcov": "wrapper/bin/msvc_nop.bat",
        "ld": "%{msvc_link_path_x64}",
        "nm": "wrapper/bin/msvc_nop.bat",
        "objcopy": "wrapper/bin/msvc_nop.bat",
        "objdump": "wrapper/bin/msvc_nop.bat",
        "strip": "wrapper/bin/msvc_nop.bat",
        "spirv": "%{llvm_spirv_path_x64}",
    },
    archiver_flags = ["/MACHINE:X64"],
    default_link_flags = ["/MACHINE:X64"],
    dbg_mode_debug_flag = "%{dbg_mode_debug_flag_x64}",
    fastbuild_mode_debug_flag = "%{fastbuild_mode_debug_flag_x64}",
)

cc_toolchain(
    name = "cc-compiler-x64_windows",
    all_files = ":empty",
    ar_files = ":empty",
    as_files = ":msvc_compiler_files",
    compiler_files = ":msvc_compiler_files",
    dwp_files = ":empty",
    linker_files = ":empty",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 1,
    toolchain_config = ":msvc_x64",
    toolchain_identifier = "msvc_x64",
)

# Implements platform-based (recommended) toolchain selection.
#
# See https://docs.bazel.build/versions/master/platforms-intro.html. The main
# differences are:
#
#  1. --cpu / --crosstool_top are replaced by a platform() definition with
#       much more customizable properties. For example, a platform can specify
#       OS, device type (server, phone, tablet) or custom hardware extensions.
#  2. All languages can support platform-based toolchains. A single --platforms
#       value can choose C++, Python, Scala, and all other toolchains in your
#       build. This is especially useful for multi-language builds.
#  3. Platforms  support features like incompatible target skipping:
#       https://docs.bazel.build/versions/master/platforms.html#skipping-incompatible-targets.
toolchain(
    name = "icx-local-toolchain",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
    ],
    # Trigger this toolchain for x86-compatible platforms.
    # See https://github.com/bazelbuild/platforms.
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:windows",
        ":rules_are_enabled",
    ],
    # Register this toolchain with platforms.
    toolchain = ":cc-compiler-x64_windows",
    # The public interface for all C++ toolchains. Starlark rules that use C++
    # access the toolchain through this interface.
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

# Implements legacy toolchain selection.
#
# Setting --crosstool_top here registers the set of available
# toolchains. Setting --cpu to one of the toolchain attribute's keys selects a
# toolchain.
cc_toolchain_suite(
    name = "toolchain",
    toolchains = {
        "x64_windows": ":cc-compiler-x64_windows",
        "x64_windows|msvc-cl": ":cc-compiler-x64_windows",
    },
)

platform(
    name = "%{platform_name}",
    constraint_values = [
        "@platforms//os:windows",
        "@platforms//cpu:x86_64",
        ":rules_are_enabled",
    ],
)

constraint_setting(name = "rules_are_enabled_setting")

constraint_value(
    name = "rules_are_enabled",
    constraint_setting = ":rules_are_enabled_setting",
)
