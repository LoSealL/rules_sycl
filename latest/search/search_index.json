{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SYCL rules for Bazel","text":"<p>This repository contains Starlark implementation of SYCL rules in Bazel.</p> <p>These rules provide some macros and rules that make it easier to build SYCL with Bazel.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#traditional-workspace-approach","title":"Traditional WORKSPACE approach","text":"<p>Add the following to your <code>WORKSPACE</code> file and replace the placeholders with actual values.</p> <pre><code>load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\nhttp_archive(\n    name = \"rules_sycl\",\n    sha256 = \"{sha256_to_replace}\",\n    strip_prefix = \"rules_sycl-{git_commit_hash}\",\n    urls = [\"https://github.com/loseall/rules_sycl/archive/{git_commit_hash}.tar.gz\"],\n)\nload(\"@rules_sycl//sycl:repositories.bzl\", \"rules_sycl_dependencies\", \"rules_sycl_toolchains\")\nrules_sycl_dependencies()\nrules_sycl_toolchains(register_toolchains = True)\n</code></pre> <p>NOTE: <code>rules_sycl_toolchains</code> implicitly calls to <code>register_detected_sycl_toolchains</code>, and the use of <code>register_detected_sycl_toolchains</code> depends on the environment variable <code>CMPLR_ROOT</code>. You must also ensure the host compiler is available. On Windows, this means that you will also need to set the environment variable <code>BAZEL_VC</code> properly (mostly not needed if you installed Visual Studio in default location).</p> <p><code>detect_sycl_toolkit</code> determains how the toolchains are detected.</p>"},{"location":"#bzlmod","title":"Bzlmod","text":"<p>Add the following to your <code>MODULE.bazel</code> file and replace the placeholders with actual values.</p> <pre><code>bazel_dep(name = \"rules_sycl\", version = \"0.0.0\")\n\n# pick a specific version (this is optional an can be skipped)\narchive_override(\n    module_name = \"rules_sycl\",\n    integrity = \"{SRI value}\",  # see https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\n    url = \"https://github.com/loseall/rules_sycl/archive/{git_commit_hash}.tar.gz\",\n    strip_prefix = \"rules_sycl-{git_commit_hash}\",\n)\n\nsycl = use_extension(\"@rules_sycl//sycl:extensions.bzl\", \"toolchain\")\nsycl.toolkit(\n    name = \"sycl\",\n    toolkit_path = \"\",\n)\nuse_repo(sycl, \"sycl\")\n</code></pre>"},{"location":"#rules","title":"Rules","text":"<ul> <li><code>sycl_library</code>: Can be used to compile and create static library for SYCL kernel code. The resulting targets can be   consumed by C/C++ Rules.</li> <li><code>sycl_binary</code>/<code>sycl_test</code>: Can be used to compile and create executable or shared library for SYCL kernel code.</li> <li><code>icx_cc_library</code>: Can be used to compile and create static library for DPC++ code (without SYCL runtime involved). The resulting targets can be consumed by C/C++ Rules.</li> <li><code>icx_cc_binary</code>/<code>icx_cc_test</code>: Can be used to compile and create executable or shared library for DPC++ code (without SYCL runtime involved).</li> </ul>"},{"location":"#flags","title":"Flags","text":"<p>Some flags are defined in sycl/BUILD.bazel. To use them, for example:</p> <pre><code># not implemented yet!\nbazel build --@rules_sycl//sycl:archs=rpl-p\n</code></pre> <p>In <code>.bazelrc</code> file, you can define a shortcut alias for the flag, for example:</p> <pre><code># Convenient flag shortcuts.\nbuild --flag_alias=sycl_archs=@rules_sycl//sycl:archs\n</code></pre> <p>and then you can use it as following:</p> <pre><code>bazel build --sycl_archs=rpl-p\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>Checkout the examples to see if it fits your needs.</p> <p>See tests for basic usage.</p>"},{"location":"#known-issue","title":"Known issue","text":""},{"location":"user/user_docs/","title":"Using the rules","text":""},{"location":"user/user_docs/#spv_library","title":"spv_library","text":"<pre>\nload(\"@rules_sycl_docs//:user_docs.bzl\", \"spv_library\")\n\nspv_library(name, deps, srcs, copts, defines, includes)\n</pre> <p>ATTRIBUTES</p> Name Description Type Mandatory Default name A unique name for this target. Name required deps - List of labels optional <code>[]</code> srcs - List of labels required copts Add these options to the CUDA device compilation command. List of strings optional <code>[]</code> defines List of defines to add to the compile line. List of strings optional <code>[]</code> includes List of include dirs to be added to the compile line. List of strings optional <code>[]</code> <p></p>"},{"location":"user/user_docs/#icx_cc_binary","title":"icx_cc_binary","text":"<pre>\nload(\"@rules_sycl_docs//:user_docs.bzl\", \"icx_cc_binary\")\n\nicx_cc_binary(name, kwargs)\n</pre> <p>A macro to create a cc_binary with icx toolchain.</p> <p>It adds \"icx\" feature and <code>requires_sycl()</code> to the target_compatible_with.</p> <p>PARAMETERS</p> Name Description Default Value name the name of the target. none kwargs additional keyword arguments passed to cc_binary. none <p></p>"},{"location":"user/user_docs/#icx_cc_library","title":"icx_cc_library","text":"<pre>\nload(\"@rules_sycl_docs//:user_docs.bzl\", \"icx_cc_library\")\n\nicx_cc_library(name, kwargs)\n</pre> <p>A macro to create a cc_library with icx toolchain.</p> <p>It adds \"icx\" feature and <code>requires_sycl()</code> to the target_compatible_with.</p> <p>PARAMETERS</p> Name Description Default Value name the name of the target. none kwargs additional keyword arguments passed to cc_library. none <p></p>"},{"location":"user/user_docs/#icx_cc_test","title":"icx_cc_test","text":"<pre>\nload(\"@rules_sycl_docs//:user_docs.bzl\", \"icx_cc_test\")\n\nicx_cc_test(name, kwargs)\n</pre> <p>A macro to create a cc_test with icx toolchain.</p> <p>It adds \"icx\" feature and <code>requires_sycl()</code> to the target_compatible_with.</p> <p>PARAMETERS</p> Name Description Default Value name the name of the target. none kwargs additional keyword arguments passed to cc_test. none <p></p>"},{"location":"user/user_docs/#requires_sycl","title":"requires_sycl","text":"<pre>\nload(\"@rules_sycl_docs//:user_docs.bzl\", \"requires_sycl\")\n\nrequires_sycl()\n</pre> <p>Returns constraint_setting that is satisfied if:</p> <ul> <li>rules are enabled and</li> <li>a valid toolchain is configured.</li> </ul> <p>Add to 'target_compatible_with' attribute to mark a target incompatible when the conditions are not satisfied. Incompatible targets are excluded from bazel target wildcards and fail to build if requested explicitly.</p> <p></p>"},{"location":"user/user_docs/#rules_sycl_dependencies","title":"rules_sycl_dependencies","text":"<pre>\nload(\"@rules_sycl_docs//:user_docs.bzl\", \"rules_sycl_dependencies\")\n\nrules_sycl_dependencies()\n</pre> <p>Populate the dependencies for rules_sycl. This will setup other bazel rules as workspace dependencies</p> <p></p>"},{"location":"user/user_docs/#rules_sycl_toolchains","title":"rules_sycl_toolchains","text":"<pre>\nload(\"@rules_sycl_docs//:user_docs.bzl\", \"rules_sycl_toolchains\")\n\nrules_sycl_toolchains(name, toolkit_path, version, register_toolchains)\n</pre> <p>Populate the @sycl repo.</p> <p>PARAMETERS</p> Name Description Default Value name must be \"sycl\". <code>\"sycl\"</code> toolkit_path Optionally specify the path to SYCL toolkit. If not specified, it will be detected automatically. <code>None</code> version str for sycl toolkit version. Required for deliverable toolkit only. <code>None</code> register_toolchains Register the toolchains if enabled. <code>False</code> <p></p>"},{"location":"user/user_docs/#sycl_binary","title":"sycl_binary","text":"<pre>\nload(\"@rules_sycl_docs//:user_docs.bzl\", \"sycl_binary\")\n\nsycl_binary(name, kwargs)\n</pre> <p>A macro to create a cc_binary with icx toolchain.</p> <p>It adds \"icx\" feature and <code>requires_sycl()</code> to the target_compatible_with.</p> <p>PARAMETERS</p> Name Description Default Value name the name of the target. none kwargs additional keyword arguments passed to cc_binary. none <p></p>"},{"location":"user/user_docs/#sycl_library","title":"sycl_library","text":"<pre>\nload(\"@rules_sycl_docs//:user_docs.bzl\", \"sycl_library\")\n\nsycl_library(name, kwargs)\n</pre> <p>A macro to create a cc_library with icx toolchain.</p> <p>It adds \"icx\" feature and <code>requires_sycl()</code> to the target_compatible_with.</p> <p>PARAMETERS</p> Name Description Default Value name the name of the target. none kwargs additional keyword arguments passed to cc_library. none <p></p>"},{"location":"user/user_docs/#sycl_test","title":"sycl_test","text":"<pre>\nload(\"@rules_sycl_docs//:user_docs.bzl\", \"sycl_test\")\n\nsycl_test(name, kwargs)\n</pre> <p>A macro to create a cc_test with icx toolchain.</p> <p>It adds \"icx\" feature and <code>requires_sycl()</code> to the target_compatible_with.</p> <p>PARAMETERS</p> Name Description Default Value name the name of the target. none kwargs additional keyword arguments passed to cc_test. none <p></p>"},{"location":"user/user_docs/#sycl_toolkit","title":"sycl_toolkit","text":"<pre>\nload(\"@rules_sycl_docs//:user_docs.bzl\", \"sycl_toolkit\")\n\nsycl_toolkit(name, repo_mapping, toolkit_path, version)\n</pre> <p>ATTRIBUTES</p> Name Description Type Mandatory Default name A unique name for this repository. Name required repo_mapping In <code>WORKSPACE</code> context only: a dictionary from local repository name to global repository name. This allows controls over workspace dependency resolution for dependencies of this repository.For example, an entry <code>\"@foo\": \"@bar\"</code> declares that, for any time this repository depends on <code>@foo</code> (such as a dependency on <code>@foo//some:target</code>, it should actually resolve that dependency within globally-declared <code>@bar</code> (<code>@bar//some:target</code>).This attribute is not supported in <code>MODULE.bazel</code> context (when invoking a repository rule inside a module extension's implementation function). Dictionary: String -&gt; String optional toolkit_path Path to the oneAPI SDK, if empty the environment variable CMPLR_ROOT will be used to deduce this path. String optional <code>\"\"</code> version sycl toolkit version. Required for deliverable toolkit only. String optional <code>\"\"</code> <p>ENVIRONMENT VARIABLES</p> <p>This repository rule depends on the following environment variables:</p> <ul> <li><code>CMPLR_ROOT</code></li> </ul>"}]}